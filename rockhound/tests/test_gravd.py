"""
Test functions for GRAV-D fetch function
"""
import numpy.testing as npt

from .. import fetch_gravd
from ..gravd import BLOCKS


BOUNDARIES = {
    "AN01": (-159.080236, -148.492864, 63.329540, 66.549419),
    "AN02": (-149.458356, -144.128080, 63.610352, 66.254047),
    "AN03": (-144.660292, -142.932348, 63.455573, 66.778777),
    "AN04": (-143.099488, -137.156420, 63.597569, 66.553571),
    "AN05": (-151.427572, -137.363460, 66.234234, 72.317644),
    "AN06": (-164.622466, -149.453345, 69.173464, 72.243286),
    "AN07": (-160.757179, -147.343180, 65.615297, 69.757594),
    "AN08": (-167.621305, -157.456711, 64.238457, 69.728921),
    "AN09": (-169.435206, -156.991195, 59.665223, 66.633386),
    "AS01": (-156.543854, -146.035675, 57.145948, 62.572570),
    "AS02": (-157.843664, -148.684487, 60.094743, 63.715205),
    "AS03": (-150.176643, -138.706290, 59.372444, 63.723642),
    "AS04": (-146.634469, -130.746651, 55.345213, 63.984930),
    "AS05": (-137.131586, -125.911784, 52.328502, 59.418044),
    "AS06": (-169.396892, -152.931134, 57.053341, 61.765685),
    "AS07": (-153.667958, -144.994163, 55.855000, 59.603674),
    "AS08": (-163.038329, -149.837265, 53.523342, 58.995713),
    "AS09": (-168.307350, -154.581708, 52.383099, 57.299887),
    "TS01": (-68.066315, -64.165056, 16.682771, 21.027700),
    "CN01": (-97.693974, -84.148813, 45.521668, 50.927281),
    "CN02": (-97.253994, -88.807584, 39.956389, 43.096959),
    "CN03": (-102.963738, -95.878181, 40.090752, 43.018882),
    "CN04": (-94.811785, -88.592987, 42.745342, 46.523483),
    "CN05": (-100.429898, -93.606511, 42.948304, 46.327465),
    "CS01": (-87.900571, -87.000764, 27.069470, 31.523501),
    "CS02": (-94.144724, -88.202844, 26.861510, 31.562569),
    "CS03": (-96.546164, -92.582020, 26.677067, 31.604803),
    "CS04": (-98.905366, -95.600115, 25.215287, 31.558737),
    "CS05": (-102.099463, -98.307264, 24.986960, 31.968193),
    "CS06": (-102.019678, -96.082696, 30.027194, 33.585270),
    "CS07": (-106.504982, -101.890954, 27.354698, 35.119381),
    "CS08": (-90.185730, -85.198280, 27.174820, 31.932650),
    "CS09": (-102.653080, -95.500875, 32.915921, 36.880509),
    "EN01": (-80.600222, -75.189514, 42.782200, 45.323999),
    "EN02": (-84.508527, -77.993550, 40.400352, 43.246978),
    "EN03": (-89.192686, -83.840602, 40.702260, 46.367761),
    "EN04": (-83.959450, -79.426173, 42.780554, 47.572323),
    "EN05": (-93.092630, -83.078206, 46.042449, 49.241472),
    "EN06": (-70.875790, -64.123823, 39.635154, 46.289471),
    "EN07": (-73.627370, -65.781950, 43.750377, 49.196317),
    "EN08": (-76.985013, -70.247598, 41.469297, 47.326297),
    "EN09": (-73.699600, -69.071636, 38.496209, 43.443788),
    "EN10": (-79.003047, -72.448146, 39.806532, 43.076560),
    "ES01": (-80.906272, -76.028415, 23.382628, 27.357924),
    "ES02": (-85.652745, -78.180259, 23.800560, 27.514886),
    "ES03": (-79.366993, -71.764439, 36.822935, 40.463078),
    "ES04": (-81.310419, -73.723052, 33.637659, 37.564264),
    "ES05": (-81.268731, -75.519154, 26.911828, 31.167317),
    "ES06": (-85.992528, -80.364237, 27.085069, 31.352347),
    "ES07": (-83.486039, -75.056032, 30.672635, 34.165371),
    "MS01": (-109.832665, -100.907623, 31.810696, 35.134912),
    "MS02": (-111.678698, -105.602956, 29.733733, 32.144605),
    "MS03": (-116.084658, -110.769606, 29.709600, 33.165590),
    "MS04": (-113.848971, -108.588446, 31.772328, 37.471949),
    "MS05": (-109.164368, -101.366075, 34.671194, 38.523827),
    "PN01": (-125.548347, -119.493706, 37.710754, 43.773405),
    "PN02": (-127.187380, -120.167662, 43.341232, 50.488790),
    "PN03": (-121.716993, -116.175117, 45.209430, 50.855215),
    "PS01": (-125.033609, -116.919767, 33.577816, 38.531522),
    "PS02": (-120.287597, -114.442984, 31.001945, 32.953557),
}


def test_gravd_boundaries():
    """
    Test block geographic boundaries
    """
    for block in BLOCKS:
        dataframe = fetch_gravd(block=block)
        npt.assert_allclose(dataframe.longitude.min(), BOUNDARIES[block][0])
        npt.assert_allclose(dataframe.longitude.max(), BOUNDARIES[block][1])
        npt.assert_allclose(dataframe.latitude.min(), BOUNDARIES[block][2])
        npt.assert_allclose(dataframe.latitude.max(), BOUNDARIES[block][3])
